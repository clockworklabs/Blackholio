// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.
// <auto-generated />

#nullable enable

using System;
using SpacetimeDB;
using SpacetimeDB.ClientApi;

namespace SpacetimeDB.Types
{
	public enum ReducerType
	{
		None,
		CircleDecay,
		CreatePlayer,
		MoveAllPlayers,
		PlayerSplit,
		Respawn,
		SpawnFood,
		UpdatePlayerInput,
	}

	public interface IReducerArgs : IReducerArgsBase
	{
		ReducerType ReducerType { get; }
		bool InvokeHandler(ReducerEvent reducerEvent);
	}

	public partial class ReducerEvent : ReducerEventBase
	{
		public IReducerArgs? Args { get; }

		public string ReducerName => Args?.ReducerName ?? "<none>";

		[Obsolete("ReducerType is deprecated, please match directly on type of .Args instead.")]
		public ReducerType Reducer => Args?.ReducerType ?? ReducerType.None;

		public ReducerEvent(IReducerArgs? args) : base() => Args = args;
		public ReducerEvent(TransactionUpdate update, IReducerArgs? args) : base(update) => Args = args;

		[Obsolete("Accessors that implicitly cast `Args` are deprecated, please match `Args` against the desired type explicitly instead.")]
		public CircleDecayArgsStruct CircleDecayArgs => (CircleDecayArgsStruct)Args!;
		[Obsolete("Accessors that implicitly cast `Args` are deprecated, please match `Args` against the desired type explicitly instead.")]
		public CreatePlayerArgsStruct CreatePlayerArgs => (CreatePlayerArgsStruct)Args!;
		[Obsolete("Accessors that implicitly cast `Args` are deprecated, please match `Args` against the desired type explicitly instead.")]
		public MoveAllPlayersArgsStruct MoveAllPlayersArgs => (MoveAllPlayersArgsStruct)Args!;
		[Obsolete("Accessors that implicitly cast `Args` are deprecated, please match `Args` against the desired type explicitly instead.")]
		public PlayerSplitArgsStruct PlayerSplitArgs => (PlayerSplitArgsStruct)Args!;
		[Obsolete("Accessors that implicitly cast `Args` are deprecated, please match `Args` against the desired type explicitly instead.")]
		public RespawnArgsStruct RespawnArgs => (RespawnArgsStruct)Args!;
		[Obsolete("Accessors that implicitly cast `Args` are deprecated, please match `Args` against the desired type explicitly instead.")]
		public SpawnFoodArgsStruct SpawnFoodArgs => (SpawnFoodArgsStruct)Args!;
		[Obsolete("Accessors that implicitly cast `Args` are deprecated, please match `Args` against the desired type explicitly instead.")]
		public UpdatePlayerInputArgsStruct UpdatePlayerInputArgs => (UpdatePlayerInputArgsStruct)Args!;

		public override bool InvokeHandler() => Args?.InvokeHandler(this) ?? false;
	}

	public class SpacetimeDBClient : SpacetimeDBClientBase<ReducerEvent>
	{
		protected SpacetimeDBClient()
		{
			clientDB.AddTable<Circle>();
			clientDB.AddTable<CircleDecayTimer>();
			clientDB.AddTable<Config>();
			clientDB.AddTable<Entity>();
			clientDB.AddTable<Food>();
			clientDB.AddTable<LoggedOutCircle>();
			clientDB.AddTable<LoggedOutPlayer>();
			clientDB.AddTable<MoveAllPlayersTimer>();
			clientDB.AddTable<Player>();
			clientDB.AddTable<SpawnFoodTimer>();
		}

		public static readonly SpacetimeDBClient instance = new();

		protected override ReducerEvent ReducerEventFromDbEvent(TransactionUpdate update)
		{
			var encodedArgs = update.ReducerCall.Args;
			IReducerArgs? args = update.ReducerCall.ReducerName switch {
				"circle_decay" => BSATNHelpers.Decode<CircleDecayArgsStruct>(encodedArgs),
				"create_player" => BSATNHelpers.Decode<CreatePlayerArgsStruct>(encodedArgs),
				"move_all_players" => BSATNHelpers.Decode<MoveAllPlayersArgsStruct>(encodedArgs),
				"player_split" => BSATNHelpers.Decode<PlayerSplitArgsStruct>(encodedArgs),
				"respawn" => BSATNHelpers.Decode<RespawnArgsStruct>(encodedArgs),
				"spawn_food" => BSATNHelpers.Decode<SpawnFoodArgsStruct>(encodedArgs),
				"update_player_input" => BSATNHelpers.Decode<UpdatePlayerInputArgsStruct>(encodedArgs),
				"<none>" => null,
				"__identity_connected__" => null,
				"__identity_disconnected__" => null,
				"" => null,
				var reducer => throw new ArgumentOutOfRangeException("Reducer", $"Unknown reducer {reducer}")
			};
			return new ReducerEvent(update, args);
		}
	}
}
