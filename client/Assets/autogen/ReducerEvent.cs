// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

using System;
using ClientApi;
using Newtonsoft.Json.Linq;
using SpacetimeDB;

namespace SpacetimeDB.Types
{
	public enum ReducerType
	{
		None,
		CreatePlayer,
		MoveAllPlayers,
		SpawnFood,
		UpdatePlayerInput,
	}

	public partial class ReducerEvent : ReducerEventBase
	{
		public ReducerType Reducer { get; private set; }

		public ReducerEvent(ReducerType reducer, string reducerName, ulong timestamp, SpacetimeDB.Identity identity, SpacetimeDB.Address? callerAddress, string errMessage, ClientApi.Event.Types.Status status, object args)
			: base(reducerName, timestamp, identity, callerAddress, errMessage, status, args)
		{
			Reducer = reducer;
		}

		public CreatePlayerArgsStruct CreatePlayerArgs
		{
			get
			{
				if (Reducer != ReducerType.CreatePlayer) throw new SpacetimeDB.ReducerMismatchException(Reducer.ToString(), "CreatePlayer");
				return (CreatePlayerArgsStruct)Args;
			}
		}
		public MoveAllPlayersArgsStruct MoveAllPlayersArgs
		{
			get
			{
				if (Reducer != ReducerType.MoveAllPlayers) throw new SpacetimeDB.ReducerMismatchException(Reducer.ToString(), "MoveAllPlayers");
				return (MoveAllPlayersArgsStruct)Args;
			}
		}
		public SpawnFoodArgsStruct SpawnFoodArgs
		{
			get
			{
				if (Reducer != ReducerType.SpawnFood) throw new SpacetimeDB.ReducerMismatchException(Reducer.ToString(), "SpawnFood");
				return (SpawnFoodArgsStruct)Args;
			}
		}
		public UpdatePlayerInputArgsStruct UpdatePlayerInputArgs
		{
			get
			{
				if (Reducer != ReducerType.UpdatePlayerInput) throw new SpacetimeDB.ReducerMismatchException(Reducer.ToString(), "UpdatePlayerInput");
				return (UpdatePlayerInputArgsStruct)Args;
			}
		}

		public object[] GetArgsAsObjectArray()
		{
			switch (Reducer)
			{
				case ReducerType.CreatePlayer:
				{
					var args = CreatePlayerArgs;
					return new object[] {
						args.Name,
					};
				}
				case ReducerType.MoveAllPlayers:
				{
					var args = MoveAllPlayersArgs;
					return new object[] {
					};
				}
				case ReducerType.SpawnFood:
				{
					var args = SpawnFoodArgs;
					return new object[] {
					};
				}
				case ReducerType.UpdatePlayerInput:
				{
					var args = UpdatePlayerInputArgs;
					return new object[] {
						args.Direction,
						args.Magnitude,
					};
				}
				default: throw new System.Exception($"Unhandled reducer case: {Reducer}. Please run SpacetimeDB code generator");
			}
		}
	}
}
